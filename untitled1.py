# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fXpsR7eqtrLZJsbqciwI9rsWKxPUqy-c
"""



"""# dictionary **bold text**"""

# Step 1: Import libraries
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Step 2: Create a bigger dataset of movies
movies = {
    "title": [
        "The Dark Knight", "Inception", "Interstellar", "The Matrix", "Titanic",
        "The Avengers", "Avatar", "The Lion King", "Gladiator", "The Godfather",
        "Iron Man", "Shutter Island", "Frozen", "Joker", "Black Panther",
        "Doctor Strange", "Finding Nemo", "The Shawshank Redemption",
        "Pulp Fiction", "Forrest Gump"
    ],
    "description": [
        "Batman faces the Joker in Gotham city.",
        "A thief enters dreams to steal corporate secrets.",
        "Astronauts travel through a wormhole in search of a new home.",
        "A computer hacker learns about the true nature of his reality.",
        "A romance aboard the ill-fated Titanic ship.",
        "Earth's mightiest heroes unite against a common threat.",
        "A marine on an alien planet torn between duty and love.",
        "A young lion prince flees and learns about responsibility.",
        "A Roman general seeks revenge after betrayal.",
        "The aging patriarch of a crime family transfers power to his son.",
        "A billionaire builds a powerful suit to fight evil.",
        "A U.S. Marshal investigates a psychiatric facility on an island.",
        "A princess with magical ice powers struggles to control them.",
        "A failed comedian descends into madness and becomes a villain.",
        "The king of Wakanda must defend his land and people.",
        "A surgeon discovers the hidden world of magic and alternate realities.",
        "A clownfish crosses the ocean to rescue his son.",
        "Two imprisoned men bond over years, finding redemption.",
        "The lives of two hitmen, a boxer, and others intertwine.",
        "A man with low IQ recounts his extraordinary life story."
    ]
}

# Step 3: Convert to DataFrame
df = pd.DataFrame(movies)
print("Movie Dataset:")
print(df)

# Step 4: Vectorize the descriptions
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(df["description"])

# Step 5: Compute similarity between all movies
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Step 6: Define the recommender function
def recommend_movies(title, num_recommendations=5):
    if title not in df["title"].values:
        return ["Movie not found in dataset. Try another one."]

    idx = df[df["title"] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:num_recommendations+1]
    movie_indices = [i[0] for i in sim_scores]

    return df["title"].iloc[movie_indices].tolist()

# Step 7: Test the recommender
print("\nRecommendations for 'Inception':")
print(recommend_movies("Inception"))

print("\nRecommendations for 'Joker':")
print(recommend_movies("Joker"))

print("\nRecommendations for 'Titanic':")
print(recommend_movies("Titanic"))